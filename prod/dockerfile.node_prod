# Stage 1: Build the backend
FROM node:20 AS builder

WORKDIR /app

# Set NODE_ENV to development to install devDependencies
ENV NODE_ENV=development
ENV DATABASE_URL="postgresql://postgres:postgres@postgres_primary:5432/postgres"
# Copy package.json and package-lock.json
COPY package.json ./

# Install dependencies
RUN npm install

RUN npm install --save @nestjs/cli
RUN npm install --save @prisma/client

# Verify that @nestjs/cli adn prisma is installed
RUN npm list @nestjs/cli
RUN npm list @prisma/client

#vVerify that nest and rpsima are accessible
# RUN which nest
# RUN which prisma

# Copy the rest of the application source code
COPY . .

RUN npx prisma generate

# Build the application
RUN npm run build:only

# Stage 2: Production environment
FROM node:20-alpine AS runner

WORKDIR /app

# Set NODE_ENV to production
ENV NODE_ENV=production

# Copy package.json and package-lock.json
COPY package*.json ./

# Install only production dependencies
RUN npm install

# Copy the built application from the builder stage
COPY --from=builder /app/dist ./dist

# Copy Prisma client from builder stage
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Copy the Prisma schema files (if needed at runtime)
COPY --from=builder /app/prisma ./prisma

# Expose the port used by the backend
EXPOSE 3000

# Command to run the application
CMD ["node", "dist/main.js"]
