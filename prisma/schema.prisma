generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
model users {
  id                        Int                         @id @default(autoincrement())
  email                     String                      @unique @db.VarChar(255)
  password                  String                      @db.VarChar(255)
  role                      Role                        @default(DEFAULT)
  username                  String?                     @unique @db.VarChar(255)
  first_name                String?                     @db.VarChar(255)
  last_name                 String?                     @db.VarChar(255)
  gender                    Gender?                     @default(OTHER)
  active                    Boolean                     @default(true)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  created_by                Int?
  updated_by                Int?
  production_steps_progress production_steps_progress[]
}

model persons {
  id                                           Int           @id @default(autoincrement())
  name                                         String        @db.VarChar(255)
  type                                         Person_Type   @default(SUPPLIER)
  active                                       Boolean       @default(true)
  created_at                                   DateTime      @default(now()) @db.Timestamp(6)
  updated_at                                   DateTime      @default(now()) @db.Timestamp(6)
  created_by                                   Int?
  updated_by                                   Int?
  products                                     products[]
  stock_items                                  stock_items[]
  stock_items_stock_items_suppliersTosuppliers stock_items[] @relation("stock_items_suppliersTosuppliers")
}

model products {
  id                        Int                         @id @default(autoincrement())
  description               String                      @db.VarChar(255)
  code                      String                      @unique @db.VarChar(255)
  sku                       String                      @unique @db.VarChar(255)
  origin                    Origin                      @default(RAW_MATERIAL)
  unit_measure              Unit_Measure                @default(UN)
  category_id               Int                         @default(1)
  group_id                  Int                         @default(1)
  supplier_id               Int?
  nutritional_info          Json?
  image_link                String?
  photo                     Bytes[]
  active                    Boolean                     @default(true)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  created_by                Int?
  updated_by                Int?
  composition_items         composition_items[]
  compositions              compositions[]
  prices                    prices[]
  final_product_made        production_orders_items[]   @relation("final_product_made")
  production_steps_progress production_steps_progress[]
  categories                categories                  @relation(fields: [category_id], references: [id])
  groups                    groups                      @relation(fields: [group_id], references: [id])
  supplier                  persons?                    @relation(fields: [supplier_id], references: [id])
  stock_items               stock_items[]
}

/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
model compositions {
  id                Int                 @id @default(autoincrement())
  product_id        Int
  description       String              @db.VarChar(255)
  created_at        DateTime            @default(now()) @db.Timestamp(6)
  updated_at        DateTime            @default(now()) @db.Timestamp(6)
  created_by        Int?
  updated_by        Int?
  production_steps  Json?               @db.Json
  composition_items composition_items[]
  products          products            @relation(fields: [product_id], references: [id])
}

model composition_items {
  id             Int          @id @default(autoincrement())
  composition_id Int
  sequence       Int
  product_id     Int
  quantity       Float
  created_at     DateTime     @default(now()) @db.Timestamp(6)
  updated_at     DateTime     @default(now()) @db.Timestamp(6)
  created_by     Int?
  updated_by     Int?
  compositions   compositions @relation(fields: [composition_id], references: [id])
  products       products     @relation(fields: [product_id], references: [id])
}

model groups {
  id           Int        @id @default(autoincrement())
  description  String     @db.VarChar(255)
  father_id    Int?
  active       Boolean    @default(true)
  created_at   DateTime   @default(now()) @db.Timestamp(6)
  updated_at   DateTime   @default(now()) @db.Timestamp(6)
  created_by   Int?
  updated_by   Int?
  groups       groups?    @relation("groupsTogroups", fields: [father_id], references: [id])
  other_groups groups[]   @relation("groupsTogroups")
  products     products[]
}

model categories {
  id          Int        @id @default(autoincrement())
  description String     @unique @db.VarChar(255)
  active      Boolean    @default(true)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  created_by  Int?
  updated_by  Int?
  products    products[]
}

model prices {
  id         Int        @id @default(autoincrement())
  product_id Int
  price      Float
  type       Price_Type @default(COST)
  is_current Boolean    @default(true)
  created_at DateTime   @default(now()) @db.Timestamp(6)
  updated_at DateTime   @default(now()) @db.Timestamp(6)
  created_by Int?
  updated_by Int?
  products   products   @relation(fields: [product_id], references: [id])
}

/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
model stock {
  id              Int            @id @default(autoincrement())
  document_number String         @unique @db.VarChar(255)
  document_date   DateTime       @db.Timestamp(6)
  stock_moviment  Stock_Moviment
  is_balance      Boolean        @default(false)
  document_type   String?        @db.VarChar(255)
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  created_by      Int?
  updated_by      Int?
  stock_items     stock_items[]
}

model stock_items {
  id                                         Int            @id @default(autoincrement())
  stock_id                                   Int
  sequence                                   Int
  product_id                                 Int
  quantity                                   Float
  unit_price                                 Float
  total_price                                Float
  lote                                       String?
  expiration                                 DateTime?
  image_link                                 String?
  photo                                      Bytes[]
  supplier                                   Int?
  costumer                                   Int?
  stock_location_id                          Int
  observation                                String?
  created_at                                 DateTime       @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime       @default(now()) @db.Timestamp(6)
  created_by                                 Int?
  updated_by                                 Int?
  customers                                  persons?       @relation(fields: [costumer], references: [id])
  products                                   products       @relation(fields: [product_id], references: [id])
  stock                                      stock          @relation(fields: [stock_id], references: [id])
  stock_location                             stock_location @relation(fields: [stock_location_id], references: [id])
  suppliers_stock_items_suppliersTosuppliers persons?       @relation("stock_items_suppliersTosuppliers", fields: [supplier], references: [id])
}

model stock_location {
  id          Int           @id @default(autoincrement())
  description String        @db.VarChar(255)
  active      Boolean       @default(true)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  created_by  Int?
  updated_by  Int?
  stock_items stock_items[]
}

/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
/// ///////////////////////////////////////////////////////////////////////////////////////////////////////
model production_orders {
  id                        Int                         @id @default(autoincrement())
  number                    Int                         @unique
  description               String?                     @db.VarChar(255)
  production_date           DateTime                    @default(now()) @db.Timestamp(6)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  created_by                Int?
  updated_by                Int?
  Production_Status         Production_Status           @default(CREATED)
  production_item           production_orders_items[]
  production_steps_progress production_steps_progress[]
}

model production_orders_items {
  id                           Int               @id @default(autoincrement())
  production_order_id          Int
  sequence                     Int
  final_product_id             Int
  prodution_quantity_estimated Float
  production_quantity_real     Float
  production_quantity_loss     Float
  lote                         String?           @db.VarChar(255)
  lote_expiration              DateTime?
  created_at                   DateTime          @default(now()) @db.Timestamp(6)
  updated_at                   DateTime          @default(now()) @db.Timestamp(6)
  created_by                   Int?
  updated_by                   Int?
  final_product_made           products          @relation("final_product_made", fields: [final_product_id], references: [id], onDelete: Cascade, map: "final_product_fkey")
  production_order             production_orders @relation(fields: [production_order_id], references: [id], onDelete: Cascade)
}

model production_order_steps {
  id                        Int                         @id @default(autoincrement())
  description               String                      @db.VarChar(255)
  active                    Boolean                     @default(true)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  created_by                Int?
  updated_by                Int?
  production_steps_progress production_steps_progress[]
}

model production_lines {
  id                        Int                         @id @default(autoincrement())
  description               String                      @db.VarChar(255)
  active                    Boolean                     @default(true)
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  created_by                Int?
  updated_by                Int?
  production_steps_progress production_steps_progress[]
}

model ocurrences {
  id                              Int                               @id @default(autoincrement())
  description                     String                            @db.VarChar(255)
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  created_by                      Int?
  updated_by                      Int?
  ocurrences_of_production_stages ocurrences_of_production_stages[]
}

model ocurrences_of_production_stages {
  id               Int                       @id @default(autoincrement())
  ocurrence_id     Int
  description      String                    @db.VarChar(255)
  observation      String?
  image_link       String?
  photo            Bytes[]
  stage_ocurred_id Int
  created_at       DateTime                  @default(now()) @db.Timestamp(6)
  updated_at       DateTime                  @default(now()) @db.Timestamp(6)
  created_by       Int?
  updated_by       Int?
  ocurrences       ocurrences                @relation(fields: [ocurrence_id], references: [id])
  stage            production_steps_progress @relation(fields: [stage_ocurred_id], references: [id])
}

model production_steps_progress {
  id                              Int                               @id @default(autoincrement())
  production_id                   Int
  step_id                         Int
  sequence                        Int
  raw_product_id                  Int
  start_time                      DateTime?
  end_time                        DateTime?
  total_time                      Float?
  initial_quantity                Float?
  final_quantity                  Float?
  quantity_loss                   Float?
  machine                         String?
  line_id                         Int?                              @default(1)
  image_link                      String?
  photo                           Bytes[]
  observation                     String?
  operator_id                     Int?
  ocurrences                      Json?                             @db.Json
  created_at                      DateTime                          @default(now()) @db.Timestamp(6)
  updated_at                      DateTime                          @default(now()) @db.Timestamp(6)
  created_by                      Int?
  updated_by                      Int?
  ocurrences_of_production_stages ocurrences_of_production_stages[]
  production_lines                production_lines?                 @relation(fields: [line_id], references: [id])
  users                           users?                            @relation(fields: [operator_id], references: [id])
  production_orders               production_orders                 @relation(fields: [production_id], references: [id])
  products                        products                          @relation(fields: [raw_product_id], references: [id])
  production_order_steps          production_order_steps            @relation(fields: [step_id], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Role {
  DEFAULT
  ROOT
  ADMIN
  DEMO
  API
  SYSTEM
}

enum Person_Type {
  COSTUMER
  SUPPLIER
}

enum Origin {
  RAW_MATERIAL
  MADE
  CONSUMABLE
  OTHER
}

enum Price_Type {
  COST
  SALE
}

enum Unit_Measure {
  UN
  PC
  PCT
  ML
  L
  GR
  KG
  TON
}

enum Stock_Moviment {
  INPUT
  TRANSIT
  OUTPUT
}

enum Production_Status {
  CREATED
  SCHEDULED
  OPEN
  IN_PROGRESS
  FINISHED
  STOPPED
  CANCELED
}
