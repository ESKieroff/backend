generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Categoria {
  id           Int            @id @default(autoincrement())
  descricao    String
  produto      ProdutoFinal[]
  materiaPrima MateriaPrima[]
}

model ProdutoFinal {
  id             Int            @id @default(autoincrement())
  descricao      String
  unidade_medida String
  categoriaId    Int
  categoria      Categoria      @relation(fields: [categoriaId], references: [id])
  loteProduto    LoteProduto[]
  etapa          Etapa[]
  materiaPrima   MateriaPrima[]
  ordens         Ordem[]
}

model MateriaPrima {
  id             Int           @id @default(autoincrement())
  descricao      String
  unidade_medida String
  preco_custo    Float
  imagem         String?
  loteMateria    LoteMateria[]
  categoriaId    Int
  categoria      Categoria     @relation(fields: [categoriaId], references: [id])
  produtoFinalId Int
  produtoFinal   ProdutoFinal  @relation(fields: [produtoFinalId], references: [id])
}

model LoteMateria {
  id                 Int          @id @default(autoincrement())
  numero             String
  quantidade_inicial Float
  quantidade_atual   Float
  data_entrada       DateTime
  fornecedor         String
  materiaPrimaId     Int
  materiaPrima       MateriaPrima @relation(fields: [materiaPrimaId], references: [id])
  localId            Int
  local              Local        @relation(fields: [localId], references: [id])
  ordens             Ordem[]
}

model Local {
  id          Int           @id @default(autoincrement())
  descricao   String
  loteMateria LoteMateria[]
  loteProduto LoteProduto[]
}

model LoteProduto {
  id         Int          @id @default(autoincrement())
  numero     String
  quantidade Int
  imagem     String?
  produtoId  Int
  produto    ProdutoFinal @relation(fields: [produtoId], references: [id])
  localId    Int
  local      Local        @relation(fields: [localId], references: [id])
  Ordem      Ordem?       @relation(fields: [ordemId], references: [id])
  ordemId    Int?
}

model Ordem {
  id                  Int           @id @default(autoincrement())
  numero              String
  data_ordem          DateTime
  quantidade_esperada Int
  status              String
  produtoFinalId      Int
  produtoFinal        ProdutoFinal  @relation(fields: [produtoFinalId], references: [id])
  loteMateriaId       Int
  loteMateria         LoteMateria   @relation(fields: [loteMateriaId], references: [id])
  etapaOrdem          EtapaOrdem[]
  LoteProduto         LoteProduto[]
}

model Etapa {
  id         Int          @id @default(autoincrement())
  descricao  String
  produtoId  Int
  produto    ProdutoFinal @relation(fields: [produtoId], references: [id])
  etapaOrdem EtapaOrdem[]
  Usuario    Usuario?     @relation(fields: [usuarioId], references: [id])
  usuarioId  Int?
}

model EtapaOrdem {
  id                 Int          @id @default(autoincrement())
  status             String
  quantidade_inicial Float
  quantidade_final   Float
  ordemId            Int
  ordem              Ordem        @relation(fields: [ordemId], references: [id])
  etapaId            Int
  etapa              Etapa        @relation(fields: [etapaId], references: [id])
  usuarioId          Int
  usuario            Usuario      @relation(fields: [usuarioId], references: [id])
  ocorrencias        Ocorrencia[]
}

model Ocorrencia {
  id              Int        @id @default(autoincrement())
  titulo          String
  texto           String
  data_ocorrencia DateTime
  imagem          String?
  etapaOrdemId    Int
  etapaOrdem      EtapaOrdem @relation(fields: [etapaOrdemId], references: [id])
}

model Usuario {
  id         Int          @id @default(autoincrement())
  nome       String
  senha      String
  etapas     Etapa[]
  etapaOrdem EtapaOrdem[]
}
