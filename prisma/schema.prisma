generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                            USUÁRIOS
//////////////////////////////////////////////////////////////////////////////////////////////////////////
// usuários do sistema
model users {
    id         Int      @id @default(autoincrement())
    username   String   @unique @db.VarChar(255)
    email      String   @unique @db.VarChar(255)
    password   String   @db.VarChar(255)
    first_name String?  @db.VarChar(255)
    last_name  String?  @db.VarChar(255)
    role       Role     @default(PUBLIC)
    gender     Gender?  @default(OTHER)
    active     Boolean  @default(true)
    created_at DateTime @default(now()) @db.Timestamp(6)
    updated_at DateTime @default(now()) @db.Timestamp(6)
}

model categories {
    id          Int        @id @default(autoincrement())
    description String     @unique @db.VarChar(255)
    active      Boolean    @default(true)
    created_at  DateTime   @default(now()) @db.Timestamp(6)
    updated_at  DateTime   @default(now()) @db.Timestamp(6)
    products    products[]
}

model composition_items {
    id             Int          @id @default(autoincrement())
    composition_id Int
    sequence       Int
    product_id     Int
    quantity       Float
    created_at     DateTime     @default(now()) @db.Timestamp(6)
    updated_at     DateTime     @default(now()) @db.Timestamp(6)
    compositions   compositions @relation(fields: [composition_id], references: [id])
    products       products     @relation(fields: [product_id], references: [id])
}

model compositions {
    id                Int                 @id @default(autoincrement())
    product_id        Int
    description       String              @db.VarChar(255)
    created_at        DateTime            @default(now()) @db.Timestamp(6)
    updated_at        DateTime            @default(now()) @db.Timestamp(6)
    production_steps  Json?               @db.Json
    composition_items composition_items[]
    products          products            @relation(fields: [product_id], references: [id])
}

model groups {
    id           Int        @id @default(autoincrement())
    description  String     @db.VarChar(255)
    father_id    Int?
    active       Boolean    @default(true)
    created_at   DateTime   @default(now()) @db.Timestamp(6)
    updated_at   DateTime   @default(now()) @db.Timestamp(6)
    groups       groups?    @relation("groupsTogroups", fields: [father_id], references: [id])
    other_groups groups[]   @relation("groupsTogroups")
    products     products[]
}

model ocurrences {
    id          Int      @id @default(autoincrement())
    description String   @db.VarChar(255)
    created_at  DateTime @default(now()) @db.Timestamp(6)
    updated_at  DateTime @default(now()) @db.Timestamp(6)
}

model prices {
    id         Int        @id @default(autoincrement())
    product_id Int
    price      Float
    type       Price_Type @default(COST)
    is_current Boolean    @default(true)
    created_at DateTime   @default(now()) @db.Timestamp(6)
    updated_at DateTime   @default(now()) @db.Timestamp(6)
    products   products   @relation(fields: [product_id], references: [id])
}

model production {
    id                           Int               @id @default(autoincrement())
    description                  String            @db.VarChar(255)
    prodution_quantity_estimated Float
    production_quantity_real     Float
    lote                         String?           @db.VarChar(255)
    expiration                   DateTime?
    created_at                   DateTime          @default(now()) @db.Timestamp(6)
    updated_at                   DateTime          @default(now()) @db.Timestamp(6)
    Production_Status            Production_Status @default(CREATED)
    final_product                Int
    final_product_made           products          @relation("final_product_made", fields: [final_product], references: [id], onDelete: Cascade, map: "final_product_fkey")
    production_work              production_work[]
    production_item              production_item[]
}

model production_steps {
    id              Int               @id @default(autoincrement())
    description     String            @db.VarChar(255)
    created_at      DateTime          @default(now()) @db.Timestamp(6)
    updated_at      DateTime          @default(now()) @db.Timestamp(6)
    production_work production_work[]
}

model production_work {
    id               Int              @id @default(autoincrement())
    production_id    Int
    step_id          Int
    raw_product_id   Int
    sequence         Int
    start_time       DateTime?
    end_time         DateTime?
    total_time       Float?
    initial_weight   Float?
    final_weight     Float?
    weight_loss      Float?
    machine          String?
    photo            Bytes[]
    observation      String?
    ocurrences       Json?            @db.Json
    created_at       DateTime         @default(now()) @db.Timestamp(6)
    updated_at       DateTime         @default(now()) @db.Timestamp(6)
    production       production       @relation(fields: [production_id], references: [id])
    products         products         @relation(fields: [raw_product_id], references: [id])
    production_steps production_steps @relation(fields: [step_id], references: [id])
}

model production_item {
    id            Int        @id @default(autoincrement())
    production    production @relation(fields: [production_id], references: [id], onDelete: Cascade)
    production_id Int
    product       products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
    product_id    Int
    quantity      Float?
    created_at    DateTime   @default(now()) @db.Timestamp(6)
    updated_at    DateTime   @default(now()) @db.Timestamp(6)
}

model products {
    id                 Int                 @id @default(autoincrement())
    description        String              @db.VarChar(255)
    code               String              @unique @db.VarChar(255)
    sku                String              @unique @db.VarChar(255)
    origin             Origin              @default(RAW_MATERIAL)
    unit_measure       Unit_Measure        @default(UN)
    category_id        Int                 @default(1)
    group_id           Int                 @default(1)
    supplier_id        Int?
    nutritional_info   String?
    active             Boolean             @default(true)
    created_at         DateTime            @default(now()) @db.Timestamp(6)
    updated_at         DateTime            @default(now()) @db.Timestamp(6)
    composition_items  composition_items[]
    compositions       compositions[]
    prices             prices[]
    final_product_made production[]        @relation("final_product_made")
    production_work    production_work[]
    categories         categories          @relation(fields: [category_id], references: [id])
    groups             groups              @relation(fields: [group_id], references: [id])
    persons            persons?            @relation(fields: [supplier_id], references: [id])
    stock_items        stock_items[]
    production_item    production_item[]
}

model stock {
    id              Int            @id @default(autoincrement())
    document_number String         @db.VarChar(255)
    document_date   DateTime       @db.Timestamp(6)
    stock_moviment  Stock_Moviment
    created_at      DateTime       @default(now()) @db.Timestamp(6)
    updated_at      DateTime       @default(now()) @db.Timestamp(6)
    stock_items     stock_items[]
}

model stock_items {
    id                                         Int            @id @default(autoincrement())
    stock_id                                   Int
    sequence                                   Int
    product_id                                 Int
    quantity                                   Float
    unit_price                                 Float
    total_price                                Float
    lote                                       String?
    expiration                                 DateTime?
    persons                                    Int?
    costumers                                  Int?
    stock_location_id                          Int
    observation                                String?
    created_at                                 DateTime       @default(now()) @db.Timestamp(6)
    updated_at                                 DateTime       @default(now()) @db.Timestamp(6)
    customers                                  persons?       @relation(fields: [costumers], references: [id])
    products                                   products       @relation(fields: [product_id], references: [id])
    stock                                      stock          @relation(fields: [stock_id], references: [id])
    stock_location                             stock_location @relation(fields: [stock_location_id], references: [id])
    suppliers_stock_items_suppliersTosuppliers persons?       @relation("stock_items_suppliersTosuppliers", fields: [persons], references: [id])
}

model stock_location {
    id          Int           @id @default(autoincrement())
    description String        @db.VarChar(255)
    active      Boolean       @default(true)
    created_at  DateTime      @default(now()) @db.Timestamp(6)
    updated_at  DateTime      @default(now()) @db.Timestamp(6)
    stock_items stock_items[]
}

model persons {
    id                                           Int           @id @default(autoincrement())
    name                                         String        @db.VarChar(255)
    type                                         Person_Type   @default(SUPPLIER)
    active                                       Boolean       @default(true)
    created_at                                   DateTime      @default(now()) @db.Timestamp(6)
    updated_at                                   DateTime      @default(now()) @db.Timestamp(6)
    products                                     products[]
    stock_items_stock_items_suppliersTosuppliers stock_items[] @relation("stock_items_suppliersTosuppliers")
    stock_items                                  stock_items[]
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Role {
    ROOT
    ADMIN
    PUBLIC
    ERP
    API
    SYSTEM
    ANONYMOUS
}

enum Person_Type {
    COSTUMER
    SUPPLIER
}

enum Origin {
    RAW_MATERIAL
    MADE
}

enum Price_Type {
    COST
    SALE
}

enum Production_Status {
    CREATED
    SCHEDULED
    OPEN
    IN_PROGRESS
    FINISHED
    STOPPED
    CANCELED
}

enum Stock_Moviment {
    INPUT
    TRANSIT
    OUTPUT
}

enum Unit_Measure {
    UN
    KG
    L
    GR
    ML
    PC
}
