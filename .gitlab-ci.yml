variables:
  # Docker image details
  DOCKER_IMAGE_NAME1: "norohim/cp-planta-backend"
  DOCKER_IMAGE_NAME2: "norohim/postgres-optimal"
  DOCKER_IMAGE_TAG: "latest"
  DOCKER_DRIVER: "overlay2"
  PUPPETEER_SKIP_DOWNLOAD: "true"
  DOCKER_REGISTRY: docker.io 

stages:
  - commit-msg-check
  - lint
  - test
  - build_and_push
  - deploy

cache:
  paths:
    - /var/lib/docker
    - node_modules/

# Default settings for all jobs
default:
  image: node:20-alpine
  before_script:
    - cp .env.example .env
    - sed -i "s/NODE_ENV=dev/NODE_ENV=production/g" .env
    - npm cache clean --force
    - rm -rf node_modules/ package-lock.json # Remove node_modules directory
    - npm install --force --ignore-scripts # Install dependencies cleanly
    - df -h

# Commit message check using commitlint
commit-msg-check:
  stage: commit-msg-check
  script:
    - echo "$CI_COMMIT_MESSAGE" | npx commitlint
  only:
    - branches
    - merge_requests

# Linting and formatting job
lint:
  image: node:20-alpine
  stage: lint
  script:
    - npm run lint
    - npm run prettier
  only:
    - merge_requests
    - branches

# Testing job
test:
  image: node:20-alpine
  stage: test
  script:
    - npm run test:ci
  only:
    - merge_requests
    - branches
  after_script:
    - npm cache clean --force

# Build and Push Docker image job
build_and_push_docker_image:
  stage: build_and_push
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
      command: ["--storage-driver=overlay2", "--dns=8.8.8.8"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
    GITLAB_RUNNER_TIMEOUT: 300
    DOCKER_DRIVER: overlay2
    DNS_SERVER: 8.8.8.8
  before_script:
    - docker info
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - docker build -f ./prod/dockerfile.node_prod -t "$DOCKER_IMAGE_NAME1:$DOCKER_IMAGE_TAG" .
    - docker push "$DOCKER_IMAGE_NAME1:$DOCKER_IMAGE_TAG"
    - cd prod
    - docker build -f ./dockerfile.postgres_prod -t "$DOCKER_IMAGE_NAME2:$DOCKER_IMAGE_TAG" .
    - docker push "$DOCKER_IMAGE_NAME2:$DOCKER_IMAGE_TAG"
    - cd ..
  only:
    - master

# trigger deploy when build an push succeed
trigger-infra-pipeline:
  stage: deploy
  before_script:
    - apk add --no-cache curl jq bash 
  script:
    - echo "Triggering infrastructure pipeline...$CI_JOB_TOKEN"
    - curl -X POST --fail -F token=90cbad47a562a7bae7cf8de55d3e34 -F ref=main https://tools.ages.pucrs.br/api/v4/projects/683/trigger/pipeline
  only:
    - master
  dependencies:
    - build_and_push_docker_image
